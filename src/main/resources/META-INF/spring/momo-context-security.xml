<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
       xmlns:beans="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/security
                           http://www.springframework.org/schema/security/spring-security.xsd">

    <!-- Authentication Manager -->
    <authentication-manager alias="authenticationManager">
        <authentication-provider ref="shogun2AuthenticationProvider" />
    </authentication-manager>

    <!-- Remove the security for static resources to allow caching
     through mvc:resources. -->
    <http pattern="/lib/**" security="none" />
    <http pattern="/admin/build/**" security="none" />
    <http pattern="/admin/resources/**" security="none" />
    <http pattern="/client/build/**" security="none" />
    <http pattern="/client/resources/**" security="none" />
    <http pattern="/login/build/**" security="none" />
    <http pattern="/login/resources/**" security="none" />
    <!-- images need to be retrieved by the geoserver due to externalgraphics
        in the sldstyler, so we need to remove the csrf security enhancement -->
    <http pattern="/momoimage/getThumbnail.action" security="none" />

    <!-- Remove security for print requests, where we cannot include csrf tokens -->
    <http pattern="/print/**" security="none" />



    <!-- Web/URL security -->
    <http auto-config="true" use-expressions="true" access-decision-manager-ref="accessDecisionManager">

        <!-- Login/Logout -->
        <form-login
            login-page="/login"
            login-processing-url="/doLogin"
            username-parameter="username"
            password-parameter="password"
            authentication-failure-handler-ref="momoAuthenticationFailureHandler"
            default-target-url="/admin"
            />
        <logout logout-url="/logout" />

        <!-- As CSRF protection is enabled by default in Spring Security 4,
             the logout-url will only work with POST requests. To work with
             GET requests CSRF has to be disabled -->
        <csrf disabled="false"/>

        <!-- URL security -->
        <intercept-url pattern="/index.html" access="permitAll" />
        <intercept-url pattern="/login/**" access="permitAll" />
        <intercept-url pattern="/user/register.action" access="permitAll" />
        <intercept-url pattern="/momousers/activateAccount.action" access="permitAll" />
        <intercept-url pattern="/user/resetPassword.action" access="permitAll" />
        <intercept-url pattern="/user/changePassword.action" access="permitAll" />
        <intercept-url pattern="/momousers/resendToken.action" access="permitAll" />
        <intercept-url pattern="/**" access="hasRole('ROLE_USER')" />

        <!-- Allow iFrames within the same domain, this is especially needed
         for file-uploads, Spring's default is to 'DENY'.
         See: https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options-->
        <headers>
            <frame-options policy="SAMEORIGIN" />
        </headers>

    </http>

    <!-- Enables Method Security and Expression-based access control -->
    <global-method-security pre-post-annotations="enabled">
        <!-- Enables custom expression handler -->
        <expression-handler ref="methodExpressionHandler" />
    </global-method-security>



    <!-- BEANS -->

    <!-- bcrypt password encoder -->
    <beans:bean id="bcryptEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
        <!-- Configure the strength (log rounds). Default = 10 -->
        <beans:constructor-arg value="10"/>
    </beans:bean>

    <!-- Custom Authentication Provider -->
<!--     <beans:bean id="shogun2AuthenticationProvider" class="de.terrestris.shogun2.security.Shogun2AuthenticationProvider"> -->
<!--         <beans:property name="passwordEncoder" ref="bcryptEncoder" /> -->
<!--     </beans:bean> -->
    <beans:bean id="shogun2AuthenticationProvider" class="de.terrestris.momo.security.MomoAuthenticationProvider">
        <beans:property name="passwordEncoder" ref="bcryptEncoder" />
    </beans:bean>

    <!-- This bean is referenced by the http security config to assure that the role hierarchy will be used -->
    <beans:bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
        <beans:constructor-arg>
            <beans:bean id="webExpressionVoter" class="org.springframework.security.web.access.expression.WebExpressionVoter">
                <beans:property name = "expressionHandler">
                    <beans:bean id="webExpressionHandler" class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler">
                        <beans:property name = "roleHierarchy" ref="roleHierarchy" />
                    </beans:bean>
                </beans:property>
            </beans:bean>
        </beans:constructor-arg>
    </beans:bean>

    <!-- See http://goo.gl/o42k1S -->
    <beans:bean id="methodExpressionHandler" class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler">
    <!-- To use hasPermission() in expressions, configure a PermissionEvaluator -->
         <beans:property name = "permissionEvaluator" ref="permissionEvaluator" />
         <beans:property name = "roleHierarchy" ref="roleHierarchy"/>
    </beans:bean>

    <beans:bean id="permissionEvaluator" class="de.terrestris.shogun2.security.access.Shogun2PermissionEvaluator">
        <beans:property name="permissionEvaluatorFactory">
            <beans:bean class="de.terrestris.momo.security.access.factory.MomoPermissionEvaluatorFactory" />
        </beans:property>
    </beans:bean>

    <beans:bean id="momoAuthenticationFailureHandler" class="de.terrestris.momo.security.MomoAuthenticationFailureHandler">
    </beans:bean>

    <!-- http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/access/hierarchicalroles/RoleHierarchyImpl.html -->
    <beans:bean id="roleHierarchy"  class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
        <beans:property name="hierarchy">
            <beans:value>
                ${role.superAdminRoleName} > ${role.subAdminRoleName} > ${role.editorRoleName} > ${role.defaultUserRoleName}
            </beans:value>
        </beans:property>
    </beans:bean>

</beans:beans>
