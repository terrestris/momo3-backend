<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <groupId>de.terrestris</groupId>
    <artifactId>momo</artifactId>
    <version>0.1.1-SNAPSHOT</version>
    <packaging>war</packaging>

    <name>momo</name>

    <scm>
        <url>https://github.com/terrestris/momo3-backend</url>
        <connection>scm:git:git@github.com:terrestris/momo3-backend.git</connection>
        <developerConnection>scm:git:git@github.com:terrestris/momo3-backend.git</developerConnection>
    </scm>

    <repositories>
        <repository>
            <id>GeoSolutions</id>
            <url>http://maven.geo-solutions.it/</url>
        </repository>
        <repository>
            <id>GeoTools</id>
            <url>http://download.osgeo.org/webdav/geotools/</url>
        </repository>
    </repositories>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- The local sencha CMD executable. Note: The executable has to be
             available in the PATH. -->
        <sencha.cmd.executable>sencha</sencha.cmd.executable>

        <!-- Skip the creation of the JavaScript applications (login, client,
             admin) per default. Create with production profile only. -->
        <skip-build-javascript-resources>true</skip-build-javascript-resources>

        <skip-userdoc-regeneration>true</skip-userdoc-regeneration>

        <jetty.contextPath>/</jetty.contextPath>

        <shogun2.version>0.1.3-SNAPSHOT</shogun2.version>

        <javax.jstl.version>1.2</javax.jstl.version>

        <postgresql.version>9.4.1209</postgresql.version>

        <maven-javadoc-plugin.version>2.10.3</maven-javadoc-plugin.version>
        <maven-compiler-plugin.version>3.3</maven-compiler-plugin.version>
        <maven-eclipse-plugin.version>2.10</maven-eclipse-plugin.version>
        <maven-scm-plugin.version>1.9.4</maven-scm-plugin.version>
        <maven-exec-plugin.version>1.5.0</maven-exec-plugin.version>
        <maven-tomcat-plugin.version>2.2</maven-tomcat-plugin.version>
        <maven-war-plugin.version>2.6</maven-war-plugin.version>
        <maven-release-plugin.version>2.5.3</maven-release-plugin.version>

        <commons-fileupload.version>1.3.1</commons-fileupload.version>
        <commons-dbutils.version>1.6</commons-dbutils.version>

        <pdfbox.version>2.0.2</pdfbox.version>

        <geoserver-manager.version>1.7-SNAPSHOT</geoserver-manager.version>

        <geotools.version>16.0</geotools.version>

        <jsch.version>0.1.54</jsch.version>

        <slf4j.version>1.5.11</slf4j.version>

        <github-release-plugin.version>1.2.0</github-release-plugin.version>

        <hamcrest.version>1.3</hamcrest.version>
        <spring.version>4.3.7.RELEASE</spring.version>
        <mockito.version>1.10.19</mockito.version>

        <downloadSources>true</downloadSources>
        <downloadJavadocs>false</downloadJavadocs>
    </properties>

    <profiles>
        <!-- A profile for JDK 1.7 -->
        <profile>
            <id>jdk7</id>
            <activation>
                <jdk>1.7</jdk>
            </activation>
            <properties>
                <jdk.version>1.7</jdk.version>
                <jetty-maven-plugin.version>9.2.14.v20151106</jetty-maven-plugin.version>
            </properties>
        </profile>

        <!-- A profile for JDK 1.8 (and later) -->
        <profile>
            <id>jdk8</id>
            <activation>
                <jdk>[1.8,)</jdk>
            </activation>
            <properties>
                <jdk.version>1.8</jdk.version>
                <!-- Make Javadocs work in 1.8. Credits go to http://stackoverflow.com/a/26806103 -->
                <javadoc.opts>-Xdoclint:none</javadoc.opts>
                <jetty-maven-plugin.version>9.4.6.v20170531</jetty-maven-plugin.version>
            </properties>
        </profile>

        <!-- The profile to be used for a testing release -->
        <profile>
            <id>momo-test-delivery</id>
            <!-- Activated when -Denv=momo-test-delivery is given as
                parameter. -->
            <activation>
                <property>
                    <name>env</name>
                    <value>momo-test-delivery</value>
                </property>
            </activation>
            <properties>
                <app.profile>ci</app.profile>
                <skip-jetty-execution>true</skip-jetty-execution>
                <skip-build-javascript-resources>false</skip-build-javascript-resources>
                <deploy.server.url>http://188.40.113.28:8080/manager/text</deploy.server.url>
                <deploy.server.id>momo-test</deploy.server.id>
                <deploy.server.path>/momo</deploy.server.path>
            </properties>
        </profile>

        <!-- The profile to be used for a production release -->
        <profile>
            <id>momo-production-delivery</id>
            <!-- Activated when -Denv=momo-production-delivery is given as
                parameter. -->
            <activation>
                <property>
                    <name>env</name>
                    <value>momo-production-delivery</value>
                </property>
            </activation>
            <properties>
                <app.profile>prod</app.profile>
                <skip-jetty-execution>true</skip-jetty-execution>
                <skip-build-javascript-resources>false</skip-build-javascript-resources>
                <deploy.server.url>http://188.40.111.158:8080/manager/text</deploy.server.url>
                <deploy.server.id>momo-prod</deploy.server.id>
                <deploy.server.path>/momo</deploy.server.path>
            </properties>
        </profile>

    </profiles>

    <build>
        <resources>
            <resource>
                <!-- Explicitly include the required resources -->
                <directory>src/main/resources</directory>
                <includes>
                    <include>META-INF/locale/*.csv</include>
                    <include>META-INF/spring/*.xml</include>
                    <include>META-INF/spring/${app.profile}/**</include>
                    <!-- This will include the config of the active profile (only) -->
                    <include>META-INF/config/${app.profile}/**</include>
                    <include>META-INF/config/version.properties</include>
                </includes>
                <filtering>true</filtering>
            </resource>
        </resources>

        <plugins>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>${maven-war-plugin.version}</version>
                <configuration>
                    <webXml>${basedir}/src/main/webapp/WEB-INF/web.xml</webXml>
                    <warSourceDirectory>${basedir}/src/main/webapp/</warSourceDirectory>
                    <warSourceIncludes>
                        index.html,

                        WEB-INF/momo-servlet.xml,
                        WEB-INF/config/${app.profile}/**,

                        admin/build/production/**,
                        admin/resources/**,
                        admin/classic.json,
                        admin/index.html,

                        client/build/production/**,
                        client/resources/**,
                        client/classic.json,
                        client/index.html,

                        login/build/production/**,
                        login/resources/**,
                        login/classic.json,
                        login/index.html,
                        login/registrationSucceeded.html,

                        lib/ol3/build/ol.js,
                        lib/ol3/css/ol.css,
                        lib/jsonix/**,
                        lib/geotiff.js/**,
                        lib/jszip/**,
                        lib/ogc-schemas/**,
                        lib/opentype.js/**,
                        lib/proj4/**,
                        lib/proj4-defs/**,

                        userdocs/build/iwrm_momo_logo.png,
                        userdocs/build/MoMo_doc_de.pdf,
                        userdocs/build/MoMo_doc_en.pdf,
                        userdocs/build/MoMo_doc_mn.pdf,
                        userdocs/build/MoMo_doc_de_html.html,
                        userdocs/build/MoMo_doc_en_html.html,
                        userdocs/build/MoMo_doc_mn_html.html,
                        userdocs/build/MoMo_doc_de_html.css,
                        userdocs/build/MoMo_doc_en_html.css,
                        userdocs/build/MoMo_doc_mn_html.css
                    </warSourceIncludes>
                    <warSourceExcludes>
                        lib/BasiGX/**,
                        lib/geoext3/**
                    </warSourceExcludes>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat7-maven-plugin</artifactId>
                <version>${maven-tomcat-plugin.version}</version>
                <configuration>
                    <warFile>${project.build.directory}/${project.build.finalName}.war</warFile>
                    <!-- Use variables defined in the profiles. -->
                    <url>${deploy.server.url}</url>
                    <server>${deploy.server.id}</server>
                    <path>${deploy.server.path}</path>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>${maven-exec-plugin.version}</version>
                <executions>
                    <!-- Update any available submodule -->
                    <execution>
                        <id>update-git-submodules</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${skip-build-javascript-resources}</skip>
                            <executable>git</executable>
                            <arguments>
                                <argument>submodule</argument>
                                <argument>update</argument>
                                <argument>--init</argument>
                                <argument>--recursive</argument>
                            </arguments>
                        </configuration>
                    </execution>

                    <!-- Create production build of the login application -->
                    <execution>
                        <id>build-login-application</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${skip-build-javascript-resources}</skip>
                            <workingDirectory>${basedir}/src/main/webapp/login/</workingDirectory>
                            <executable>${sencha.cmd.executable}</executable>
                            <arguments>
                                <argument>app</argument>
                                <argument>build</argument>
                                <argument>--clean</argument>
                            </arguments>
                        </configuration>
                    </execution>

                    <!-- Create production build of the gis client application -->
                    <execution>
                        <id>build-client-application</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${skip-build-javascript-resources}</skip>
                            <workingDirectory>${basedir}/src/main/webapp/client/</workingDirectory>
                            <executable>${sencha.cmd.executable}</executable>
                            <arguments>
                                <argument>app</argument>
                                <argument>build</argument>
                                <argument>--clean</argument>
                            </arguments>
                        </configuration>
                    </execution>

                    <!-- Create production build of the admin application -->
                    <execution>
                        <id>build-admin-application</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${skip-build-javascript-resources}</skip>
                            <workingDirectory>${basedir}/src/main/webapp/admin/</workingDirectory>
                            <executable>${sencha.cmd.executable}</executable>
                            <arguments>
                                <argument>app</argument>
                                <argument>build</argument>
                                <argument>--clean</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <!--
                    | AUTOUPDATED USER DOCUMENTATION BEGIN
                    |
                    | Refresh the current user docs which are stored in
                    | another repository `terrestris/momo-doc`.
                    | This repository is configured to produce a zip file with
                    | the user documentation which we will include in the
                    | warfile and reference from the JavaScript.
                    |
                    | The refreshing happens in the following order:
                    |
                    | 1) Create the directory for the user docs, if needed.
                    | 2) Remove all files from the existing `userdocs/`
                    |    directory.
                    | 3) Use the gitlab API (authorized as Mr Robot) to fetch
                    |    the latest archive containing the current user
                    |    documentation.
                    | 4) Unzip that archive in the `userdocs/`-directory.
                    | 5) Remove the zipfile with the archive.
                    |
                    | Pass -Dskip-userdoc-regeneration=true on the commandline
                    | to skip the regeneration of the user documentation
                    |
                    +-->
                    <!-- Step 1/5: Create user docs directory -->
                    <execution>
                      <id>create-user-docs-dir-if-needed</id>
                      <phase>initialize</phase>
                      <goals>
                        <goal>exec</goal>
                      </goals>
                      <configuration>
                        <skip>${skip-userdoc-regeneration}</skip>
                        <executable>mkdir</executable>
                        <!-- equivalent to piping all output to /dev/null -->
                        <outputFile>/dev/null</outputFile>
                        <arguments>
                          <argument>-p</argument>
                          <argument>${basedir}/src/main/webapp/userdocs/*</argument>
                        </arguments>
                      </configuration>
                    </execution>
                    <!-- Step 2/5: Remove previous docs -->
                    <execution>
                      <id>remove-previous-user-docs</id>
                      <phase>initialize</phase>
                      <goals>
                        <goal>exec</goal>
                      </goals>
                      <configuration>
                        <skip>${skip-userdoc-regeneration}</skip>
                        <executable>rm</executable>
                        <!-- equivalent to piping all output to /dev/null -->
                        <outputFile>/dev/null</outputFile>
                        <arguments>
                          <argument>-r</argument>
                          <argument>-f</argument>
                          <argument>${basedir}/src/main/webapp/userdocs/*</argument>
                        </arguments>
                      </configuration>
                    </execution>
                    <!-- Step 3/5: Fetch the current archive -->
                    <execution>
                      <id>fetch-user-docs-archive</id>
                      <phase>initialize</phase>
                      <goals>
                        <goal>exec</goal>
                      </goals>
                      <configuration>
                        <skip>${skip-userdoc-regeneration}</skip>
                        <!-- equivalent to piping all output to /dev/null -->
                        <outputFile>/dev/null</outputFile>
                        <executable>curl</executable>
                        <arguments>
                          <argument>https://gitlab.intranet.terrestris.de/api/v4/projects/terrestris%2Fmomo-doc/jobs/artifacts/master/download</argument>
                          <argument>--request</argument>
                          <argument>GET</argument>
                          <argument>--data</argument>
                          <argument>job=build_documents</argument>
                          <argument>--data</argument>
                          <argument>private_token=${gitlab-token}</argument>
                          <argument>--output</argument>
                          <argument>${basedir}/src/main/webapp/userdocs/latest.zip</argument>
                          <argument>--silent</argument>
                        </arguments>
                      </configuration>
                    </execution>
                    <!-- Step 4/5: Unzip that archive -->
                    <execution>
                      <id>unzip-user-docs-archive</id>
                      <phase>initialize</phase>
                      <goals>
                        <goal>exec</goal>
                      </goals>
                      <configuration>
                        <skip>${skip-userdoc-regeneration}</skip>
                        <workingDirectory>${basedir}/src/main/webapp/userdocs/</workingDirectory>
                        <executable>unzip</executable>
                        <!-- equivalent to piping all output to /dev/null -->
                        <outputFile>/dev/null</outputFile>
                        <arguments>
                          <argument>-o</argument>
                          <argument>latest.zip</argument>
                          <argument>-d</argument>
                          <argument>.</argument>
                        </arguments>
                      </configuration>
                    </execution>
                    <!-- Step 5/5: Remove downloaded archive -->
                    <execution>
                      <id>remove-user-docs-archive</id>
                      <phase>initialize</phase>
                      <goals>
                        <goal>exec</goal>
                      </goals>
                      <configuration>
                        <skip>${skip-userdoc-regeneration}</skip>
                        <workingDirectory>${basedir}/src/main/webapp/userdocs/</workingDirectory>
                        <executable>rm</executable>
                        <!-- equivalent to piping all output to /dev/null -->
                        <outputFile>/dev/null</outputFile>
                        <arguments>
                          <argument>-f</argument>
                          <argument>latest.zip</argument>
                        </arguments>
                      </configuration>
                    </execution>
                    <!-- AUTOUPDATED USER DOCUMENTATION END -->
                </executions>


            </plugin>

            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>${jetty-maven-plugin.version}</version>
                <configuration>
                    <httpConnector>
                        <!-- The port number for the connector to listen on -->
                        <port>8081</port>
                        <!-- The timeout in milliseconds -->
                        <idleTimeout>30000</idleTimeout>
                    </httpConnector>
                    <!-- The pause in seconds between sweeps of the webapp
                         to check for changes and automatically hot redeploy
                         if any are detected -->
                    <scanIntervalSeconds>5</scanIntervalSeconds>
                    <webAppConfig>
                        <contextPath>${jetty.contextPath}</contextPath>
                        <!-- Terminate the server on any startup exception -->
                        <throwUnavailableOnStartupException>true</throwUnavailableOnStartupException>
                    </webAppConfig>
                </configuration>
                <executions>
                    <!-- Run the server on mvn:test -->
<!--                     <execution> -->
<!--                         <id>start-jetty</id> -->
<!--                         <phase>test</phase> -->
<!--                         <goals> -->
<!--                             <goal>start</goal> -->
<!--                         </goals> -->
<!--                     </execution> -->
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <source>${jdk.version}</source>
                    <target>${jdk.version}</target>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>${maven-eclipse-plugin.version}</version>
                <configuration>
                    <wtpversion>2.0</wtpversion>
                    <wtpmanifest>true</wtpmanifest>
                    <!-- If useProjectReferences is true, it is very likely
                        that you get problems when using a webapplication server like tomcat in Eclipse,
                        because the WTP mechanism does not work as expected in some points. For example
                        the resources in src/test/resources would also be scanned, e.g. for spring-context
                        configurations, although these resources should be independent from the tested
                        sources. -->
                    <useProjectReferences>false</useProjectReferences>
                    <downloadSources>${downloadSources}</downloadSources>
                    <downloadJavadocs>${downloadJavadocs}</downloadJavadocs>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>${maven-javadoc-plugin.version}</version>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                        <configuration>
                            <additionalparam>${javadoc.opts}</additionalparam>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>de.jutzig</groupId>
                <artifactId>github-release-plugin</artifactId>
                <version>${github-release-plugin.version}</version>
                <configuration>
                    <!-- The description to be used in the release, may be
                         edited afterwards via GitHub UI. -->
                    <description>${releaseDescription}</description>
                    <!-- The name of the release, typically the current
                         version number. -->
                    <releaseName>${project.version}</releaseName>
                    <!-- The name of the corresponding relase tag, typically
                         the current version number. -->
                    <tag>${project.version}</tag>
                    <!-- A list of files to be added to the release, typically
                         we want to add the build artifact of the current
                         release only. -->
                    <fileSets>
                        <fileSet>
                            <directory>${project.build.directory}</directory>
                            <includes>
                                <include>${project.artifactId}*.war</include>
                            </includes>
                            <excludes>
                                <exclude>*SNAPSHOT*.*</exclude>
                            </excludes>
                        </fileSet>
                    </fileSets>
                </configuration>
            </plugin>

        </plugins>

        <pluginManagement>
            <plugins>
                <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                        <lifecycleMappingMetadata>
                            <pluginExecutions>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>
                                            org.codehaus.mojo
                                        </groupId>
                                        <artifactId>
                                            exec-maven-plugin
                                        </artifactId>
                                        <versionRange>
                                            [1.5.0,)
                                        </versionRange>
                                        <goals>
                                            <goal>exec</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore />
                                    </action>
                                </pluginExecution>
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <dependencies>

        <!-- JSTL library  -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>${javax.jstl.version}</version>
        </dependency>

        <dependency>
            <groupId>de.terrestris</groupId>
            <artifactId>shogun2-core</artifactId>
            <version>${shogun2.version}</version>
        </dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>${postgresql.version}</version>
        </dependency>

        <!-- Apache Commons FileUpload -->
        <dependency>
            <groupId>commons-fileupload</groupId>
            <artifactId>commons-fileupload</artifactId>
            <version>${commons-fileupload.version}</version>
        </dependency>

        <!-- Apache Commons DbUtils -->
        <dependency>
            <groupId>commons-dbutils</groupId>
            <artifactId>commons-dbutils</artifactId>
            <version>${commons-dbutils.version}</version>
        </dependency>

        <!-- The Apache PDFBox library is an open source Java tool for working with PDF documents. -->
        <dependency>
            <groupId>org.apache.pdfbox</groupId>
            <artifactId>pdfbox</artifactId>
            <version>${pdfbox.version}</version>
        </dependency>

        <!-- GeoServer Manager -->
        <dependency>
            <groupId>it.geosolutions</groupId>
            <artifactId>geoserver-manager</artifactId>
            <version>${geoserver-manager.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>commons-codec</groupId>
                    <artifactId>commons-codec</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.geotools/gt-main -->
        <dependency>
            <groupId>org.geotools</groupId>
            <artifactId>gt-main</artifactId>
            <version>${geotools.version}</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.geotools/gt-epsg-hsql -->
        <dependency>
            <groupId>org.geotools</groupId>
            <artifactId>gt-epsg-hsql</artifactId>
            <version>${geotools.version}</version>
        </dependency>

        <!-- Jsch for remote SSH execution -->
        <dependency>
            <groupId>com.jcraft</groupId>
            <artifactId>jsch</artifactId>
            <version>${jsch.version}</version>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>${slf4j.version}</version>
        </dependency>

        <dependency>
            <groupId>de.jutzig</groupId>
            <artifactId>github-release-plugin</artifactId>
            <version>${github-release-plugin.version}</version>
        </dependency>

        <!-- Spring test -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <!-- Hamcrest -->
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-all</artifactId>
            <version>${hamcrest.version}</version>
        </dependency>

        <!-- Mockito -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.hamcrest</groupId>
                    <artifactId>hamcrest-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

    </dependencies>

</project>
